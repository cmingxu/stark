//= require angularjs/angular.min.js
//= require axios/dist/axios.min.js


var authenticity_token = $('meta[name="csrf-token"]').attr('content');
axios.defaults.headers.post['Content-Type'] = 'application/json';
axios.defaults.headers.post['Accept'] = 'application/json';

axios.defaults.headers.put['Content-Type'] = 'application/json';
axios.defaults.headers.put['Accept'] = 'application/json';
axios.defaults.validateStatus = function (status) {
  return status >= 200 && status < 500; // default
}

angular.module('app', [])
  .controller('AppController', function($scope) {
    $scope.submitted = false;
    $scope.app = window.appObj;
    $scope.appPersisted = window.appPersisted;
    $scope.appsUnderService = window.appsUnderService;
    $scope.webservicesUnderApp = window.webservicesUnderApp;
    $scope.locale = window.locale;
    $scope.constraint_operators = ["UNIQUE", "LIKE", "UNLIKE", "CLUSTER", "GROUP_BY", "MAX_PER"];

    fillApp();

    $scope.submit = function () {
      $scope.submitted = true;
      if($scope.appForm.$invalid) {
        alert("form invalid");
      }else{
        var promptTitle = "name this version for application";
        if(locale == "zh-CN") {
          promptTitle = "版本名称";
        }
        bootbox.prompt({
          title: promptTitle,
          value: "version-0001",
          buttons: {
            cancel: {
              label: '<i class="fa fa-times"></i>'
            },
            confirm: {
              label: '<i class="fa fa-check"></i>'
            }
          },
          callback: function (result) {
            if(result) {
              $scope.app.version_name = result;
              axios[window.httpMethod](window.postPath, {
                app: JSON.parse(angular.toJson($scope.reformatApp($scope.app))),
                authenticity_token: authenticity_token
              }).then(function (response) {
                if(response.status < 300){
                  window.location.href = "/services";
                }else{
                  $.notify(response.data.message, {type: 'danger'});
                }
              }).catch(function(err) {
                $.notify(err, {type: 'danger'});
              });
            }
          }
        });
      }
    }

    $scope.reformatApp = function (app) {
      var formattedApp = angular.copy(app);
      var portNameIndex = 0;
      for (var i = 0;  i < app.portmappings.length;  i++) {
        if(app.health_check.portName == app.portmappings[i].name) {
          portNameIndex = i;
          break;
        }
      }
      formattedApp.health_check.portIndex = portNameIndex;
      delete formattedApp.health_check.portName;

      switch (formattedApp.health_check.protocol) {
        case 'COMMAND':
          var value = formattedApp.health_check.value;
          formattedApp.command = {"value": value};
          delete formattedApp.health_check.path;
          delete formattedApp.health_check.value;
          break;
        case 'TCP':
          delete formattedApp.health_check.path;
          delete formattedApp.health_check.value;
          break;
        case 'MESOS_TCP':
          delete formattedApp.health_check.path;
          delete formattedApp.health_check.value;
          break;
        case 'HTTP':
          delete formattedApp.health_check.value
          break;
        case 'MESOS_HTTP':
          delete formattedApp.health_check.value
          break;
        case 'HTTPS':
          delete formattedApp.health_check.value
          break;
        case 'MESOS_HTTPS':
          delete formattedApp.health_check.value
          break;
        default:
      }

      

    return formattedApp;
  }

    $scope.supportGateway = function () {
      return $scope.app.network == "bridge" ||
        $scope.app.network == "host";
    }

    $scope.needPathOption = function () {
      var protocolList = ["HTTP", "HTTPS", "MESOS_HTTP", "MESOS_HTTPS"];
      return protocolList.indexOf($scope.app.health_check.protocol) >= 0;
    }

    $scope.needChoosePort = function () {
      var protocolList = ["HTTP", "HTTPS", "TCP", "MESOS_HTTP", "MESOS_HTTPS", "MESOS_TCP"];
      return protocolList.indexOf($scope.app.health_check.protocol) >= 0;
    }

    // envs
    $scope.removeEnv = function (index) {
      $scope.app.env.splice(index, 1);
    }

    $scope.moreEnv = function () {
      if($scope.app.env == null || angular.isUndefined($scope.app.env) ) {
        $scope.app.env = [];
      }

      $scope.app.env.push({"key": "KEY", "value": "VALUE"});
    }

    // parameters
    $scope.removeParameter = function (index) {
      $scope.app.parameters.splice(index, 1);
    }

    $scope.moreParameter = function () {
      if(angular.isUndefined($scope.app.parameters) || $scope.app.parameters == null) {
        $scope.app.parameters = [];
      }

      $scope.app.parameters.push({"key": "hostname", "value": "hostname"});
    }


    // uri
    $scope.removeUris = function (index) {
      $scope.app.uris.splice(index, 1);
    }

    $scope.moreUris = function () {
      if($scope.app.uris == null) {
        $scope.app.uris = [];
      }

      $scope.app.uris.push("http://baidu.com/foobar" + $scope.app.uris.length + ".tar.gz");
    }

    // labels
    $scope.removeLabel = function (index) {
      $scope.app.labels.splice(index, 1);
    }

    $scope.moreLabels = function () {
      if($scope.app.labels == null) {
        $scope.app.labels = {};
      }

      $scope.app.labels.push({"key": "KEY", "value": "VALUE"});
    }

    // volumes
    $scope.removeVolumes = function (index) {
      $scope.app.volumes.splice(index, 1);
    }

    $scope.moreVolumes = function () {
      if($scope.app.volumes == null) {
        $scope.app.volumes = [];
      }

      $scope.app.volumes.push(
        {
          hostPath: "/",
          containerPath: "/hostHome",
          mode: "RO"
        }
      );
    }

    // links
    $scope.removeLink = function (index) {
      $scope.app.app_links[index]._destroy = 1;
    }

    $scope.moreLink = function () {
      if($scope.app.app_links == null) {
        $scope.app.app_links = [];
      }

      var firstAppId = Object.values($scope.appsUnderService)[0];
      var firstAppName = Object.keys($scope.appsUnderService)[0];

      $scope.app.app_links.push({
        alias: firstAppName,
        output_app_id: firstAppId,
        output_service: Object.keys(webservicesUnderApp[firstAppId])[0],
        _destroy: 0,
      });
    }

    $scope.moreConstraint = function (index) {
      $scope.app.constraints.push(["hostname", "LIKE", ".*"]);
    }

    $scope.removeConstraint = function (index) {
      $scope.app.constraints.splice(index, 1);
    };

    // portmappings
    $scope.removePortmapping = function (index) {
      $scope.app.portmappings.splice(index, 1);
    }

    $scope.morePortmapping = function () {
      if(angular.isUndefined($scope.app.portmappings) || $scope.app.portmappings == null) {
        $scope.app.portmappings = [];
      }

      $scope.app.portmappings.push(
        {name: "web",
          containerPort: 80,
          hostPort: 0,
          servicePort: 0,
          proto: "tcp"}
      );
    }

    $scope.portMappingHasError = function(portmappings) {
      for(var i = 0; i < $scope.app.portmappings.length; i ++) {
        mapping = $scope.app.portmappings[i];
        if(mapping.name == null || mapping.name == "") {
          return false;
        }

        if(mapping.containerPort == null || mapping.containerPort == "") {
          return false;
        }

        if(mapping.servicePort == null || mapping.servicePort == "") {
          return false;
        }

        if(mapping.hostPort == null || mapping.hostPort == "") {
          return false;
        }
      }
    }

    $scope.appLinkHasError = function() {
      for(var i = 0; i < $scope.app.app_links.length; i ++) {
        link = $scope.app.app_links[i];
        if(link.alias == null || link.alias == "") {
          return false;
        }
      }
      return true;
    }

    function fillApp() {
      if($scope.app.cpu == null){
        $scope.app.cpu = 0.1;
      }

      if($scope.app.mem == null){
        $scope.app.mem = 64;
      }

      if($scope.app.disk == null){
        $scope.app.disk = 128;
      }

      if($scope.app.cmd == null){
        $scope.app.cmd = "";
      }

      if($scope.app.name == null){
        $scope.app.name = "barfoo";
      }

      if($scope.app.desc == null){
        $scope.app.desc = "from here to sunny tommorrow!";
      }

      if($scope.app.image == null){
        $scope.app.image = "nginx:latest";
      }

      if($scope.app.network == null){
        $scope.app.network = "bridge";
      }

      if(angular.isUndefined($scope.app.portmappings) || $scope.app.portmappings == null) {
        $scope.app.portmappings = [];
      }

      $scope.app.portmappings.push(
        {name: "web",
          containerPort: 80,
          hostPort: 0,
          servicePort: 0,
          proto: "tcp"}
      );

      if($scope.app.health_check == null || Object.getOwnPropertyNames($scope.health_check || {}).length == 0){
        $scope.app.health_check = {
          "protocol": "HTTP",
          "value": "echo 1;",
          "path": "/",
          "delaySeconds": 10,
          "gracePeriodSeconds": 1,
          "portName": "web",
          "intervalSeconds": 1,
          "timeoutSeconds": 2,
          "consecutiveFailures": 10
        };
      }
    }
  });

angular.module("selectBox", []).directive('selectBox', function() {
  return {
    restrict: 'E',
    link: function() {
      return $(window).bind("load", function() {
        //this will make all your select elements use bootstrap-select
        return $('select').selectpicker();
      });
    }
  };
});
